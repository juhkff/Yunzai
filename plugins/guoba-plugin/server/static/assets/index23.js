var __defProp=Object.defineProperty,__defProps=Object.defineProperties,__getOwnPropDescs=Object.getOwnPropertyDescriptors,__getOwnPropSymbols=Object.getOwnPropertySymbols,__hasOwnProp=Object.prototype.hasOwnProperty,__propIsEnum=Object.prototype.propertyIsEnumerable,__pow=Math.pow,__defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:!0,configurable:!0,writable:!0,value:value}):obj[key]=value,__spreadValues=(a,b)=>{for(var prop in b||(b={}))__hasOwnProp.call(b,prop)&&__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b))__propIsEnum.call(b,prop)&&__defNormalProp(a,prop,b[prop]);return a},__spreadProps=(a,b)=>__defProps(a,__getOwnPropDescs(b));import{d as defineComponent,d7 as Input,p as propTypes,r as ref,E as useDesign,C as computed,L as watchEffect,w as watch,y as unref,b as _export_sfc,c as resolveComponent,o as openBlock,e as createElementBlock,h as createBlock,a$ as createSlots,f as renderList,i as withCtx,aq as renderSlot,a0 as normalizeProps,a1 as guardReactiveProps,D as mergeProps,x as createCommentVNode,v as createBaseVNode,z as normalizeClass,bi as withInstall}from"./index.js";const extend=(listToExtend,list)=>listToExtend.push.apply(listToExtend,list),translate=(string,chrMap)=>string.split("").map((char=>chrMap[char]||char)).join(""),sorted=matches=>matches.sort(((m1,m2)=>m1.i-m2.i||m1.j-m2.j)),buildRankedDictionary=orderedList=>{const result={};let counter=1;return orderedList.forEach((word=>{result[word]=counter,counter+=1})),result};const DATE_SPLITS={4:[[1,2],[2,3]],5:[[1,3],[2,3],[2,4]],6:[[1,2],[2,4],[4,5]],7:[[1,3],[2,3],[4,5],[4,6]],8:[[2,4],[4,6]]},START_UPPER=/^[A-Z\xbf-\xdf][^A-Z\xbf-\xdf]+$/,END_UPPER=/^[^A-Z\xbf-\xdf]+[A-Z\xbf-\xdf]$/,ALL_UPPER=/^[A-Z\xbf-\xdf]+$/,ALL_UPPER_INVERTED=/^[^a-z\xdf-\xff]+$/,ALL_LOWER=/^[a-z\xdf-\xff]+$/,ALL_LOWER_INVERTED=/^[^A-Z\xbf-\xdf]+$/,ONE_LOWER=/[a-z\xdf-\xff]/,ONE_UPPER=/[A-Z\xbf-\xdf]/,ALPHA_INVERTED=/[^A-Za-z\xbf-\xdf]/gi,ALL_DIGIT=/^\d+$/,REFERENCE_YEAR=(new Date).getFullYear(),REGEXEN={recentYear:/19\d\d|200\d|201\d|202\d/g};class MatchDate{match({password:password}){const matches=[...this.getMatchesWithoutSeparator(password),...this.getMatchesWithSeparator(password)],filteredMatches=this.filterNoise(matches);return sorted(filteredMatches)}getMatchesWithSeparator(password){const matches=[],maybeDateWithSeparator=/^(\d{1,4})([\s/\\_.-])(\d{1,2})\2(\d{1,4})$/;for(let i=0;i<=Math.abs(password.length-6);i+=1)for(let j=i+5;j<=i+9&&!(j>=password.length);j+=1){const token=password.slice(i,+j+1||9e9),regexMatch=maybeDateWithSeparator.exec(token);if(null!=regexMatch){const dmy=this.mapIntegersToDayMonthYear([parseInt(regexMatch[1],10),parseInt(regexMatch[3],10),parseInt(regexMatch[4],10)]);null!=dmy&&matches.push({pattern:"date",token:token,i:i,j:j,separator:regexMatch[2],year:dmy.year,month:dmy.month,day:dmy.day})}}return matches}getMatchesWithoutSeparator(password){const matches=[],maybeDateNoSeparator=/^\d{4,8}$/,metric=candidate=>Math.abs(candidate.year-REFERENCE_YEAR);for(let i=0;i<=Math.abs(password.length-4);i+=1)for(let j=i+3;j<=i+7&&!(j>=password.length);j+=1){const token=password.slice(i,+j+1||9e9);if(maybeDateNoSeparator.exec(token)){const candidates=[],index=token.length;if(DATE_SPLITS[index].forEach((([k,l])=>{const dmy=this.mapIntegersToDayMonthYear([parseInt(token.slice(0,k),10),parseInt(token.slice(k,l),10),parseInt(token.slice(l),10)]);null!=dmy&&candidates.push(dmy)})),candidates.length>0){let bestCandidate=candidates[0],minDistance=metric(candidates[0]);candidates.slice(1).forEach((candidate=>{const distance2=metric(candidate);distance2<minDistance&&(bestCandidate=candidate,minDistance=distance2)})),matches.push({pattern:"date",token:token,i:i,j:j,separator:"",year:bestCandidate.year,month:bestCandidate.month,day:bestCandidate.day})}}}return matches}filterNoise(matches){return matches.filter((match=>{let isSubmatch=!1;const matchesLength=matches.length;for(let o=0;o<matchesLength;o+=1){const otherMatch=matches[o];if(match!==otherMatch&&otherMatch.i<=match.i&&otherMatch.j>=match.j){isSubmatch=!0;break}}return!isSubmatch}))}mapIntegersToDayMonthYear(integers){if(integers[1]>31||integers[1]<=0)return null;let over12=0,over31=0,under1=0;for(let o=0,len1=integers.length;o<len1;o+=1){const int=integers[o];if(int>99&&int<1e3||int>2050)return null;int>31&&(over31+=1),int>12&&(over12+=1),int<=0&&(under1+=1)}return over31>=2||3===over12||under1>=2?null:this.getDayMonth(integers)}getDayMonth(integers){const possibleYearSplits=[[integers[2],integers.slice(0,2)],[integers[0],integers.slice(1,3)]],possibleYearSplitsLength=possibleYearSplits.length;for(let j=0;j<possibleYearSplitsLength;j+=1){const[y,rest]=possibleYearSplits[j];if(1e3<=y&&y<=2050){const dm=this.mapIntegersToDayMonth(rest);return null!=dm?{year:y,month:dm.month,day:dm.day}:null}}for(let k=0;k<possibleYearSplitsLength;k+=1){const[y,rest]=possibleYearSplits[k],dm=this.mapIntegersToDayMonth(rest);if(null!=dm)return{year:this.twoToFourDigitYear(y),month:dm.month,day:dm.day}}return null}mapIntegersToDayMonth(integers){const temp=[integers,integers.slice().reverse()];for(let i=0;i<temp.length;i+=1){const data=temp[i],day=data[0],month=data[1];if(day>=1&&day<=31&&month>=1&&month<=12)return{day:day,month:month}}return null}twoToFourDigitYear(year){return year>99?year:year>50?year+1900:year+2e3}}const peq=new Uint32Array(65536),distance=(a,b)=>{if(a.length<b.length){const tmp=b;b=a,a=tmp}return 0===b.length?a.length:a.length<=32?((a,b)=>{const n=a.length,m=b.length,lst=1<<n-1;let pv=-1,mv=0,sc=n,i=n;for(;i--;)peq[a.charCodeAt(i)]|=1<<i;for(i=0;i<m;i++){let eq=peq[b.charCodeAt(i)];const xv=eq|mv;eq|=(eq&pv)+pv^pv,mv|=~(eq|pv),pv&=eq,mv&lst&&sc++,pv&lst&&sc--,mv=mv<<1|1,pv=pv<<1|~(xv|mv),mv&=xv}for(i=n;i--;)peq[a.charCodeAt(i)]=0;return sc})(a,b):((b,a)=>{const n=a.length,m=b.length,mhc=[],phc=[],hsize=Math.ceil(n/32),vsize=Math.ceil(m/32);for(let i=0;i<hsize;i++)phc[i]=-1,mhc[i]=0;let j=0;for(;j<vsize-1;j++){let mv2=0,pv2=-1;const start2=32*j,vlen2=Math.min(32,m)+start2;for(let k=start2;k<vlen2;k++)peq[b.charCodeAt(k)]|=1<<k;for(let i=0;i<n;i++){const eq=peq[a.charCodeAt(i)],pb=phc[i/32|0]>>>i&1,mb=mhc[i/32|0]>>>i&1,xv=eq|mv2,xh=((eq|mb)&pv2)+pv2^pv2|eq|mb;let ph=mv2|~(xh|pv2),mh=pv2&xh;ph>>>31^pb&&(phc[i/32|0]^=1<<i),mh>>>31^mb&&(mhc[i/32|0]^=1<<i),ph=ph<<1|pb,mh=mh<<1|mb,pv2=mh|~(xv|ph),mv2=ph&xv}for(let k=start2;k<vlen2;k++)peq[b.charCodeAt(k)]=0}let mv=0,pv=-1;const start=32*j,vlen=Math.min(32,m-start)+start;for(let k=start;k<vlen;k++)peq[b.charCodeAt(k)]|=1<<k;let score=m;for(let i=0;i<n;i++){const eq=peq[a.charCodeAt(i)],pb=phc[i/32|0]>>>i&1,mb=mhc[i/32|0]>>>i&1,xv=eq|mv,xh=((eq|mb)&pv)+pv^pv|eq|mb;let ph=mv|~(xh|pv),mh=pv&xh;score+=ph>>>m-1&1,score-=mh>>>m-1&1,ph>>>31^pb&&(phc[i/32|0]^=1<<i),mh>>>31^mb&&(mhc[i/32|0]^=1<<i),ph=ph<<1|pb,mh=mh<<1|mb,pv=mh|~(xv|ph),mv=ph&xv}for(let k=start;k<vlen;k++)peq[b.charCodeAt(k)]=0;return score})(a,b)},findLevenshteinDistance=(password,rankedDictionary,threshold)=>{let foundDistance=0;const found=Object.keys(rankedDictionary).find((entry=>{const usedThreshold=((password,entry,threshold)=>{const isPasswordToShort=password.length<=entry.length,isThresholdLongerThanPassword=password.length<=threshold;return isPasswordToShort||isThresholdLongerThanPassword?Math.ceil(password.length/4):threshold})(password,entry,threshold),foundEntryDistance=distance(password,entry),isInThreshold=foundEntryDistance<=usedThreshold;return isInThreshold&&(foundDistance=foundEntryDistance),isInThreshold}));return found?{levenshteinDistance:foundDistance,levenshteinDistanceEntry:found}:{}};var l33tTable={a:["4","@"],b:["8"],c:["(","{","[","<"],e:["3"],g:["6","9"],i:["1","!","|"],l:["1","|","7"],o:["0"],s:["$","5"],t:["+","7"],x:["%"],z:["2"]},translationKeys={warnings:{straightRow:"straightRow",keyPattern:"keyPattern",simpleRepeat:"simpleRepeat",extendedRepeat:"extendedRepeat",sequences:"sequences",recentYears:"recentYears",dates:"dates",topTen:"topTen",topHundred:"topHundred",common:"common",similarToCommon:"similarToCommon",wordByItself:"wordByItself",namesByThemselves:"namesByThemselves",commonNames:"commonNames",userInputs:"userInputs",pwned:"pwned"},suggestions:{l33t:"l33t",reverseWords:"reverseWords",allUppercase:"allUppercase",capitalization:"capitalization",dates:"dates",recentYears:"recentYears",associatedYears:"associatedYears",sequences:"sequences",repeated:"repeated",longerKeyboardPattern:"longerKeyboardPattern",anotherWord:"anotherWord",useWords:"useWords",noNeed:"noNeed",pwned:"pwned"},timeEstimation:{ltSecond:"ltSecond",second:"second",seconds:"seconds",minute:"minute",minutes:"minutes",hour:"hour",hours:"hours",day:"day",days:"days",month:"month",months:"months",year:"year",years:"years",centuries:"centuries"}};const zxcvbnOptions=new class{constructor(){this.matchers={},this.l33tTable=l33tTable,this.dictionary={userInputs:[]},this.rankedDictionaries={},this.rankedDictionariesMaxWordSize={},this.translations=translationKeys,this.graphs={},this.useLevenshteinDistance=!1,this.levenshteinThreshold=2,this.l33tMaxSubstitutions=100,this.maxLength=256,this.setRankedDictionaries()}setOptions(options={}){options.l33tTable&&(this.l33tTable=options.l33tTable),options.dictionary&&(this.dictionary=options.dictionary,this.setRankedDictionaries()),options.translations&&this.setTranslations(options.translations),options.graphs&&(this.graphs=options.graphs),void 0!==options.useLevenshteinDistance&&(this.useLevenshteinDistance=options.useLevenshteinDistance),void 0!==options.levenshteinThreshold&&(this.levenshteinThreshold=options.levenshteinThreshold),void 0!==options.l33tMaxSubstitutions&&(this.l33tMaxSubstitutions=options.l33tMaxSubstitutions),void 0!==options.maxLength&&(this.maxLength=options.maxLength)}setTranslations(translations){if(!this.checkCustomTranslations(translations))throw new Error("Invalid translations object fallback to keys");this.translations=translations}checkCustomTranslations(translations){let valid=!0;return Object.keys(translationKeys).forEach((type=>{if(type in translations){const translationType=type;Object.keys(translationKeys[translationType]).forEach((key=>{key in translations[translationType]||(valid=!1)}))}else valid=!1})),valid}setRankedDictionaries(){const rankedDictionaries={},rankedDictionariesMaxWorkSize={};Object.keys(this.dictionary).forEach((name=>{rankedDictionaries[name]=this.getRankedDictionary(name),rankedDictionariesMaxWorkSize[name]=this.getRankedDictionariesMaxWordSize(name)})),this.rankedDictionaries=rankedDictionaries,this.rankedDictionariesMaxWordSize=rankedDictionariesMaxWorkSize}getRankedDictionariesMaxWordSize(name){const data=this.dictionary[name].map((el=>"string"!=typeof el?el.toString().length:el.length));return 0===data.length?0:data.reduce(((a,b)=>Math.max(a,b)),-Infinity)}getRankedDictionary(name){const list=this.dictionary[name];if("userInputs"===name){const sanitizedInputs=[];return list.forEach((input=>{const inputType=typeof input;"string"!==inputType&&"number"!==inputType&&"boolean"!==inputType||sanitizedInputs.push(input.toString().toLowerCase())})),buildRankedDictionary(sanitizedInputs)}return buildRankedDictionary(list)}extendUserInputsDictionary(dictionary){this.dictionary.userInputs?this.dictionary.userInputs=[...this.dictionary.userInputs,...dictionary]:this.dictionary.userInputs=dictionary,this.rankedDictionaries.userInputs=this.getRankedDictionary("userInputs"),this.rankedDictionariesMaxWordSize.userInputs=this.getRankedDictionariesMaxWordSize("userInputs")}addMatcher(name,matcher){this.matchers[name]?console.info(`Matcher ${name} already exists`):this.matchers[name]=matcher}};class MatchReverse{constructor(defaultMatch){this.defaultMatch=defaultMatch}match({password:password}){const passwordReversed=password.split("").reverse().join("");return this.defaultMatch({password:passwordReversed}).map((match=>__spreadProps(__spreadValues({},match),{token:match.token.split("").reverse().join(""),reversed:!0,i:password.length-1-match.j,j:password.length-1-match.i})))}}class MatchL33t{constructor(defaultMatch){this.defaultMatch=defaultMatch}match({password:password}){const matches=[],enumeratedSubs=this.enumerateL33tSubs(this.relevantL33tSubtable(password,zxcvbnOptions.l33tTable)),length=Math.min(enumeratedSubs.length,zxcvbnOptions.l33tMaxSubstitutions);for(let i=0;i<length;i+=1){const sub=enumeratedSubs[i];if(obj=sub,0===Object.keys(obj).length)break;const subbedPassword=translate(password,sub);this.defaultMatch({password:subbedPassword}).forEach((match=>{const token=password.slice(match.i,+match.j+1||9e9);if(token.toLowerCase()!==match.matchedWord){const matchSub={};Object.keys(sub).forEach((subbedChr=>{const chr=sub[subbedChr];-1!==token.indexOf(subbedChr)&&(matchSub[subbedChr]=chr)}));const subDisplay=Object.keys(matchSub).map((k=>`${k} -> ${matchSub[k]}`)).join(", ");matches.push(__spreadProps(__spreadValues({},match),{l33t:!0,token:token,sub:matchSub,subDisplay:subDisplay}))}}))}var obj;return matches.filter((match=>match.token.length>1))}relevantL33tSubtable(password,table){const passwordChars={},subTable={};return password.split("").forEach((char=>{passwordChars[char]=!0})),Object.keys(table).forEach((letter=>{const relevantSubs=table[letter].filter((sub=>sub in passwordChars));relevantSubs.length>0&&(subTable[letter]=relevantSubs)})),subTable}enumerateL33tSubs(table){const tableKeys=Object.keys(table);return this.getSubs(tableKeys,[[]],table).map((sub=>{const subDict={};return sub.forEach((([l33tChr,chr])=>{subDict[l33tChr]=chr})),subDict}))}getSubs(keys,subs,table){if(!keys.length)return subs;const firstKey=keys[0],restKeys=keys.slice(1),nextSubs=[];table[firstKey].forEach((l33tChr=>{subs.forEach((sub=>{let dupL33tIndex=-1;for(let i=0;i<sub.length;i+=1)if(sub[i][0]===l33tChr){dupL33tIndex=i;break}if(-1===dupL33tIndex){const subExtension=sub.concat([[l33tChr,firstKey]]);nextSubs.push(subExtension)}else{const subAlternative=sub.slice(0);subAlternative.splice(dupL33tIndex,1),subAlternative.push([l33tChr,firstKey]),nextSubs.push(sub),nextSubs.push(subAlternative)}}))}));const newSubs=this.dedup(nextSubs);return restKeys.length?this.getSubs(restKeys,newSubs,table):newSubs}dedup(subs){const deduped=[],members={};return subs.forEach((sub=>{const assoc=sub.map(((k,index)=>[k,index]));assoc.sort();const label=assoc.map((([k,v])=>`${k},${v}`)).join("-");label in members||(members[label]=!0,deduped.push(sub))})),deduped}}class MatchDictionary{constructor(){this.l33t=new MatchL33t(this.defaultMatch),this.reverse=new MatchReverse(this.defaultMatch)}match({password:password}){const matches=[...this.defaultMatch({password:password}),...this.reverse.match({password:password}),...this.l33t.match({password:password})];return sorted(matches)}defaultMatch({password:password}){const matches=[],passwordLength=password.length,passwordLower=password.toLowerCase();return Object.keys(zxcvbnOptions.rankedDictionaries).forEach((dictionaryName=>{const rankedDict=zxcvbnOptions.rankedDictionaries[dictionaryName],longestDictionaryWordSize=zxcvbnOptions.rankedDictionariesMaxWordSize[dictionaryName],searchWidth=Math.min(longestDictionaryWordSize,passwordLength);for(let i=0;i<passwordLength;i+=1){const searchEnd=Math.min(i+searchWidth,passwordLength);for(let j=i;j<searchEnd;j+=1){const usedPassword=passwordLower.slice(i,+j+1||9e9),isInDictionary=usedPassword in rankedDict;let foundLevenshteinDistance={};const isFullPassword=0===i&&j===passwordLength-1;zxcvbnOptions.useLevenshteinDistance&&isFullPassword&&!isInDictionary&&(foundLevenshteinDistance=findLevenshteinDistance(usedPassword,rankedDict,zxcvbnOptions.levenshteinThreshold));const isLevenshteinMatch=0!==Object.keys(foundLevenshteinDistance).length;if(isInDictionary||isLevenshteinMatch){const rank=rankedDict[isLevenshteinMatch?foundLevenshteinDistance.levenshteinDistanceEntry:usedPassword];matches.push(__spreadValues({pattern:"dictionary",i:i,j:j,token:password.slice(i,+j+1||9e9),matchedWord:usedPassword,rank:rank,dictionaryName:dictionaryName,reversed:!1,l33t:!1},foundLevenshteinDistance))}}}})),matches}}class MatchRegex{match({password:password,regexes:regexes=REGEXEN}){const matches=[];return Object.keys(regexes).forEach((name=>{const regex=regexes[name];regex.lastIndex=0;const regexMatch=regex.exec(password);if(regexMatch){const token=regexMatch[0];matches.push({pattern:"regex",token:token,i:regexMatch.index,j:regexMatch.index+regexMatch[0].length-1,regexName:name,regexMatch:regexMatch})}})),sorted(matches)}}var utils={nCk(n,k){let count=n;if(k>count)return 0;if(0===k)return 1;let coEff=1;for(let i=1;i<=k;i+=1)coEff*=count,coEff/=i,count-=1;return coEff},log10:n=>Math.log(n)/Math.log(10),log2:n=>Math.log(n)/Math.log(2),factorial(num){let rval=1;for(let i=2;i<=num;i+=1)rval*=i;return rval}};var uppercaseVariant=word=>{const cleanedWord=word.replace(ALPHA_INVERTED,"");if(cleanedWord.match(ALL_LOWER_INVERTED)||cleanedWord.toLowerCase()===cleanedWord)return 1;const commonCases=[START_UPPER,END_UPPER,ALL_UPPER_INVERTED],commonCasesLength=commonCases.length;for(let i=0;i<commonCasesLength;i+=1){const regex=commonCases[i];if(cleanedWord.match(regex))return 2}return(cleanedWord=>{const wordArray=cleanedWord.split(""),upperCaseCount=wordArray.filter((char=>char.match(ONE_UPPER))).length,lowerCaseCount=wordArray.filter((char=>char.match(ONE_LOWER))).length;let variations=0;const variationLength=Math.min(upperCaseCount,lowerCaseCount);for(let i=1;i<=variationLength;i+=1)variations+=utils.nCk(upperCaseCount+lowerCaseCount,i);return variations})(cleanedWord)};const estimatePossiblePatterns=({token:token,graph:graph,turns:turns})=>{const startingPosition=Object.keys(zxcvbnOptions.graphs[graph]).length,averageDegree=(graph=>{let average=0;return Object.keys(graph).forEach((key=>{const neighbors=graph[key];average+=neighbors.filter((entry=>!!entry)).length})),average/=Object.entries(graph).length,average})(zxcvbnOptions.graphs[graph]);let guesses=0;const tokenLength=token.length;for(let i=2;i<=tokenLength;i+=1){const possibleTurns=Math.min(turns,i-1);for(let j=1;j<=possibleTurns;j+=1)guesses+=utils.nCk(i-1,j-1)*startingPosition*__pow(averageDegree,j)}return guesses};const matchers={bruteforce:({token:token})=>{let minGuesses,guesses=__pow(10,token.length);return guesses===Number.POSITIVE_INFINITY&&(guesses=Number.MAX_VALUE),minGuesses=1===token.length?11:51,Math.max(guesses,minGuesses)},date:({year:year,separator:separator})=>{let guesses=365*Math.max(Math.abs(year-REFERENCE_YEAR),20);return separator&&(guesses*=4),guesses},dictionary:({rank:rank,reversed:reversed,l33t:l33t,sub:sub,token:token})=>{const baseGuesses=rank,uppercaseVariations=uppercaseVariant(token),l33tVariations=(({l33t:l33t,sub:sub,token:token})=>{if(!l33t)return 1;let variations=1;const subs=sub;return Object.keys(subs).forEach((subbed=>{const{subbedCount:subbedCount,unsubbedCount:unsubbedCount}=(({subs:subs,subbed:subbed,token:token})=>{const unsubbed=subs[subbed],chrs=token.toLowerCase().split("");return{subbedCount:chrs.filter((char=>char===subbed)).length,unsubbedCount:chrs.filter((char=>char===unsubbed)).length}})({subs:subs,subbed:subbed,token:token});if(0===subbedCount||0===unsubbedCount)variations*=2;else{const p=Math.min(unsubbedCount,subbedCount);let possibilities=0;for(let i=1;i<=p;i+=1)possibilities+=utils.nCk(unsubbedCount+subbedCount,i);variations*=possibilities}})),variations})({l33t:l33t,sub:sub,token:token});return{baseGuesses:baseGuesses,uppercaseVariations:uppercaseVariations,l33tVariations:l33tVariations,calculation:baseGuesses*uppercaseVariations*l33tVariations*(reversed?2:1)}},regex:({regexName:regexName,regexMatch:regexMatch,token:token})=>{const charClassBases={alphaLower:26,alphaUpper:26,alpha:52,alphanumeric:62,digits:10,symbols:33};return regexName in charClassBases?__pow(charClassBases[regexName],token.length):"recentYear"===regexName?Math.max(Math.abs(parseInt(regexMatch[0],10)-REFERENCE_YEAR),20):0},repeat:({baseGuesses:baseGuesses,repeatCount:repeatCount})=>baseGuesses*repeatCount,sequence:({token:token,ascending:ascending})=>{const firstChr=token.charAt(0);let baseGuesses=0;return baseGuesses=["a","A","z","Z","0","1","9"].includes(firstChr)?4:firstChr.match(/\d/)?10:26,ascending||(baseGuesses*=2),baseGuesses*token.length},spatial:({graph:graph,token:token,shiftedCount:shiftedCount,turns:turns})=>{let guesses=estimatePossiblePatterns({token:token,graph:graph,turns:turns});if(shiftedCount){const unShiftedCount=token.length-shiftedCount;if(0===shiftedCount||0===unShiftedCount)guesses*=2;else{let shiftedVariations=0;for(let i=1;i<=Math.min(shiftedCount,unShiftedCount);i+=1)shiftedVariations+=utils.nCk(shiftedCount+unShiftedCount,i);guesses*=shiftedVariations}}return Math.round(guesses)}};var estimateGuesses=(match,password)=>{const extraData={};if("guesses"in match&&null!=match.guesses)return match;const minGuesses=((match,password)=>{let minGuesses=1;return match.token.length<password.length&&(minGuesses=1===match.token.length?10:50),minGuesses})(match,password),estimationResult=((name,match)=>matchers[name]?matchers[name](match):zxcvbnOptions.matchers[name]&&"scoring"in zxcvbnOptions.matchers[name]?zxcvbnOptions.matchers[name].scoring(match):0)(match.pattern,match);let guesses=0;"number"==typeof estimationResult?guesses=estimationResult:"dictionary"===match.pattern&&(guesses=estimationResult.calculation,extraData.baseGuesses=estimationResult.baseGuesses,extraData.uppercaseVariations=estimationResult.uppercaseVariations,extraData.l33tVariations=estimationResult.l33tVariations);const matchGuesses=Math.max(guesses,minGuesses);return __spreadProps(__spreadValues(__spreadValues({},match),extraData),{guesses:matchGuesses,guessesLog10:utils.log10(matchGuesses)})};const scoringHelper={password:"",optimal:{},excludeAdditive:!1,fillArray(size,valueType){const result=[];for(let i=0;i<size;i+=1){let value=[];"object"===valueType&&(value={}),result.push(value)}return result},makeBruteforceMatch(i,j){return{pattern:"bruteforce",token:this.password.slice(i,+j+1||9e9),i:i,j:j}},update(match,sequenceLength){const k=match.j,estimatedMatch=estimateGuesses(match,this.password);let pi=estimatedMatch.guesses;sequenceLength>1&&(pi*=this.optimal.pi[estimatedMatch.i-1][sequenceLength-1]);let g=utils.factorial(sequenceLength)*pi;this.excludeAdditive||(g+=__pow(1e4,sequenceLength-1));let shouldSkip=!1;Object.keys(this.optimal.g[k]).forEach((competingPatternLength=>{const competingMetricMatch=this.optimal.g[k][competingPatternLength];parseInt(competingPatternLength,10)<=sequenceLength&&competingMetricMatch<=g&&(shouldSkip=!0)})),shouldSkip||(this.optimal.g[k][sequenceLength]=g,this.optimal.m[k][sequenceLength]=estimatedMatch,this.optimal.pi[k][sequenceLength]=pi)},bruteforceUpdate(passwordCharIndex){let match=this.makeBruteforceMatch(0,passwordCharIndex);this.update(match,1);for(let i=1;i<=passwordCharIndex;i+=1){match=this.makeBruteforceMatch(i,passwordCharIndex);const tmp=this.optimal.m[i-1];Object.keys(tmp).forEach((sequenceLength=>{"bruteforce"!==tmp[sequenceLength].pattern&&this.update(match,parseInt(sequenceLength,10)+1)}))}},unwind(passwordLength){const optimalMatchSequence=[];let k=passwordLength-1,sequenceLength=0,g=Infinity;const temp=this.optimal.g[k];for(temp&&Object.keys(temp).forEach((candidateSequenceLength=>{const candidateMetricMatch=temp[candidateSequenceLength];candidateMetricMatch<g&&(sequenceLength=parseInt(candidateSequenceLength,10),g=candidateMetricMatch)}));k>=0;){const match=this.optimal.m[k][sequenceLength];optimalMatchSequence.unshift(match),k=match.i-1,sequenceLength-=1}return optimalMatchSequence}};var scoring={mostGuessableMatchSequence(password,matches,excludeAdditive=!1){scoringHelper.password=password,scoringHelper.excludeAdditive=excludeAdditive;const passwordLength=password.length;let matchesByCoordinateJ=scoringHelper.fillArray(passwordLength,"array");matches.forEach((match=>{matchesByCoordinateJ[match.j].push(match)})),matchesByCoordinateJ=matchesByCoordinateJ.map((match=>match.sort(((m1,m2)=>m1.i-m2.i)))),scoringHelper.optimal={m:scoringHelper.fillArray(passwordLength,"object"),pi:scoringHelper.fillArray(passwordLength,"object"),g:scoringHelper.fillArray(passwordLength,"object")};for(let k=0;k<passwordLength;k+=1)matchesByCoordinateJ[k].forEach((match=>{match.i>0?Object.keys(scoringHelper.optimal.m[match.i-1]).forEach((sequenceLength=>{scoringHelper.update(match,parseInt(sequenceLength,10)+1)})):scoringHelper.update(match,1)})),scoringHelper.bruteforceUpdate(k);const optimalMatchSequence=scoringHelper.unwind(passwordLength),optimalSequenceLength=optimalMatchSequence.length,guesses=this.getGuesses(password,optimalSequenceLength);return{password:password,guesses:guesses,guessesLog10:utils.log10(guesses),sequence:optimalMatchSequence}},getGuesses(password,optimalSequenceLength){const passwordLength=password.length;let guesses=0;return guesses=0===password.length?1:scoringHelper.optimal.g[passwordLength-1][optimalSequenceLength],guesses}};class MatchRepeat{match({password:password,omniMatch:omniMatch}){const matches=[];let lastIndex=0;for(;lastIndex<password.length;){const greedyMatch=this.getGreedyMatch(password,lastIndex),lazyMatch=this.getLazyMatch(password,lastIndex);if(null==greedyMatch)break;const{match:match,baseToken:baseToken}=this.setMatchToken(greedyMatch,lazyMatch);if(match){const j=match.index+match[0].length-1,baseGuesses=this.getBaseGuesses(baseToken,omniMatch);matches.push(this.normalizeMatch(baseToken,j,match,baseGuesses)),lastIndex=j+1}}return matches.some((match=>match instanceof Promise))?Promise.all(matches):matches}normalizeMatch(baseToken,j,match,baseGuesses){const baseMatch={pattern:"repeat",i:match.index,j:j,token:match[0],baseToken:baseToken,baseGuesses:0,repeatCount:match[0].length/baseToken.length};return baseGuesses instanceof Promise?baseGuesses.then((resolvedBaseGuesses=>__spreadProps(__spreadValues({},baseMatch),{baseGuesses:resolvedBaseGuesses}))):__spreadProps(__spreadValues({},baseMatch),{baseGuesses:baseGuesses})}getGreedyMatch(password,lastIndex){const greedy=/(.+)\1+/g;return greedy.lastIndex=lastIndex,greedy.exec(password)}getLazyMatch(password,lastIndex){const lazy=/(.+?)\1+/g;return lazy.lastIndex=lastIndex,lazy.exec(password)}setMatchToken(greedyMatch,lazyMatch){const lazyAnchored=/^(.+?)\1+$/;let match,baseToken="";if(lazyMatch&&greedyMatch[0].length>lazyMatch[0].length){match=greedyMatch;const temp=lazyAnchored.exec(match[0]);temp&&(baseToken=temp[1])}else match=lazyMatch,match&&(baseToken=match[1]);return{match:match,baseToken:baseToken}}getBaseGuesses(baseToken,omniMatch){const matches=omniMatch.match(baseToken);if(matches instanceof Promise)return matches.then((resolvedMatches=>scoring.mostGuessableMatchSequence(baseToken,resolvedMatches).guesses));return scoring.mostGuessableMatchSequence(baseToken,matches).guesses}}class MatchSequence{constructor(){this.MAX_DELTA=5}match({password:password}){const result=[];if(1===password.length)return[];let i=0,lastDelta=null;const passwordLength=password.length;for(let k=1;k<passwordLength;k+=1){const delta=password.charCodeAt(k)-password.charCodeAt(k-1);if(null==lastDelta&&(lastDelta=delta),delta!==lastDelta){const j=k-1;this.update({i:i,j:j,delta:lastDelta,password:password,result:result}),i=j,lastDelta=delta}}return this.update({i:i,j:passwordLength-1,delta:lastDelta,password:password,result:result}),result}update({i:i,j:j,delta:delta,password:password,result:result}){if(j-i>1||1===Math.abs(delta)){const absoluteDelta=Math.abs(delta);if(absoluteDelta>0&&absoluteDelta<=this.MAX_DELTA){const token=password.slice(i,+j+1||9e9),{sequenceName:sequenceName,sequenceSpace:sequenceSpace}=this.getSequence(token);return result.push({pattern:"sequence",i:i,j:j,token:password.slice(i,+j+1||9e9),sequenceName:sequenceName,sequenceSpace:sequenceSpace,ascending:delta>0})}}return null}getSequence(token){let sequenceName="unicode",sequenceSpace=26;return ALL_LOWER.test(token)?(sequenceName="lower",sequenceSpace=26):ALL_UPPER.test(token)?(sequenceName="upper",sequenceSpace=26):ALL_DIGIT.test(token)&&(sequenceName="digits",sequenceSpace=10),{sequenceName:sequenceName,sequenceSpace:sequenceSpace}}}class MatchSpatial{constructor(){this.SHIFTED_RX=/[~!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:"ZXCVBNM<>?]/}match({password:password}){const matches=[];return Object.keys(zxcvbnOptions.graphs).forEach((graphName=>{const graph=zxcvbnOptions.graphs[graphName];extend(matches,this.helper(password,graph,graphName))})),sorted(matches)}checkIfShifted(graphName,password,index){return!graphName.includes("keypad")&&this.SHIFTED_RX.test(password.charAt(index))?1:0}helper(password,graph,graphName){let shiftedCount;const matches=[];let i=0;const passwordLength=password.length;for(;i<passwordLength-1;){let j=i+1,lastDirection=0,turns=0;for(shiftedCount=this.checkIfShifted(graphName,password,i);;){const adjacents=graph[password.charAt(j-1)]||[];let found=!1,foundDirection=-1,curDirection=-1;if(j<passwordLength){const curChar=password.charAt(j),adjacentsLength=adjacents.length;for(let k=0;k<adjacentsLength;k+=1){const adjacent=adjacents[k];if(curDirection+=1,adjacent){const adjacentIndex=adjacent.indexOf(curChar);if(-1!==adjacentIndex){found=!0,foundDirection=curDirection,1===adjacentIndex&&(shiftedCount+=1),lastDirection!==foundDirection&&(turns+=1,lastDirection=foundDirection);break}}}}if(!found){j-i>2&&matches.push({pattern:"spatial",i:i,j:j-1,token:password.slice(i,j),graph:graphName,turns:turns,shiftedCount:shiftedCount}),i=j;break}j+=1}}return matches}}class Matching{constructor(){this.matchers={date:MatchDate,dictionary:MatchDictionary,regex:MatchRegex,repeat:MatchRepeat,sequence:MatchSequence,spatial:MatchSpatial}}match(password){const matches=[],promises=[];return[...Object.keys(this.matchers),...Object.keys(zxcvbnOptions.matchers)].forEach((key=>{if(!this.matchers[key]&&!zxcvbnOptions.matchers[key])return;const result=(new(this.matchers[key]?this.matchers[key]:zxcvbnOptions.matchers[key].Matching)).match({password:password,omniMatch:this});result instanceof Promise?(result.then((response=>{extend(matches,response)})),promises.push(result)):extend(matches,result)})),promises.length>0?new Promise((resolve=>{Promise.all(promises).then((()=>{resolve(sorted(matches))}))})):sorted(matches)}}const times={second:1,minute:60,hour:3600,day:86400,month:2678400,year:32140800,century:321408e4};class TimeEstimates{translate(displayStr,value){let key=displayStr;void 0!==value&&1!==value&&(key+="s");const{timeEstimation:timeEstimation}=zxcvbnOptions.translations;return timeEstimation[key].replace("{base}",`${value}`)}estimateAttackTimes(guesses){const crackTimesSeconds={onlineThrottling100PerHour:guesses/(100/3600),onlineNoThrottling10PerSecond:guesses/10,offlineSlowHashing1e4PerSecond:guesses/1e4,offlineFastHashing1e10PerSecond:guesses/1e10},crackTimesDisplay={onlineThrottling100PerHour:"",onlineNoThrottling10PerSecond:"",offlineSlowHashing1e4PerSecond:"",offlineFastHashing1e10PerSecond:""};return Object.keys(crackTimesSeconds).forEach((scenario=>{const seconds=crackTimesSeconds[scenario];crackTimesDisplay[scenario]=this.displayTime(seconds)})),{crackTimesSeconds:crackTimesSeconds,crackTimesDisplay:crackTimesDisplay,score:this.guessesToScore(guesses)}}guessesToScore(guesses){return guesses<1005?0:guesses<1000005?1:guesses<100000005?2:guesses<10000000005?3:4}displayTime(seconds){let base,displayStr="centuries";const timeKeys=Object.keys(times),foundIndex=timeKeys.findIndex((time2=>seconds<times[time2]));return foundIndex>-1&&(displayStr=timeKeys[foundIndex-1],0!==foundIndex?base=Math.round(seconds/times[displayStr]):displayStr="ltSecond"),this.translate(displayStr,base)}}var bruteforceMatcher=()=>null,dateMatcher=()=>({warning:zxcvbnOptions.translations.warnings.dates,suggestions:[zxcvbnOptions.translations.suggestions.dates]});const getDictionaryWarning=(match,isSoleMatch)=>{let warning="";const dictName=match.dictionaryName,isAName="lastnames"===dictName||dictName.toLowerCase().includes("firstnames");return"passwords"===dictName?warning=((match,isSoleMatch)=>{let warning="";return!isSoleMatch||match.l33t||match.reversed?match.guessesLog10<=4&&(warning=zxcvbnOptions.translations.warnings.similarToCommon):warning=match.rank<=10?zxcvbnOptions.translations.warnings.topTen:match.rank<=100?zxcvbnOptions.translations.warnings.topHundred:zxcvbnOptions.translations.warnings.common,warning})(match,isSoleMatch):dictName.includes("wikipedia")?warning=((match,isSoleMatch)=>{let warning="";return isSoleMatch&&(warning=zxcvbnOptions.translations.warnings.wordByItself),warning})(0,isSoleMatch):isAName?warning=((match,isSoleMatch)=>isSoleMatch?zxcvbnOptions.translations.warnings.namesByThemselves:zxcvbnOptions.translations.warnings.commonNames)(0,isSoleMatch):"userInputs"===dictName&&(warning=zxcvbnOptions.translations.warnings.userInputs),warning};var dictionaryMatcher=(match,isSoleMatch)=>{const warning=getDictionaryWarning(match,isSoleMatch),suggestions=[],word=match.token;return word.match(START_UPPER)?suggestions.push(zxcvbnOptions.translations.suggestions.capitalization):word.match(ALL_UPPER_INVERTED)&&word.toLowerCase()!==word&&suggestions.push(zxcvbnOptions.translations.suggestions.allUppercase),match.reversed&&match.token.length>=4&&suggestions.push(zxcvbnOptions.translations.suggestions.reverseWords),match.l33t&&suggestions.push(zxcvbnOptions.translations.suggestions.l33t),{warning:warning,suggestions:suggestions}},regexMatcher=match=>"recentYear"===match.regexName?{warning:zxcvbnOptions.translations.warnings.recentYears,suggestions:[zxcvbnOptions.translations.suggestions.recentYears,zxcvbnOptions.translations.suggestions.associatedYears]}:{warning:"",suggestions:[]},repeatMatcher=match=>{let warning=zxcvbnOptions.translations.warnings.extendedRepeat;return 1===match.baseToken.length&&(warning=zxcvbnOptions.translations.warnings.simpleRepeat),{warning:warning,suggestions:[zxcvbnOptions.translations.suggestions.repeated]}},sequenceMatcher=()=>({warning:zxcvbnOptions.translations.warnings.sequences,suggestions:[zxcvbnOptions.translations.suggestions.sequences]}),spatialMatcher=match=>{let warning=zxcvbnOptions.translations.warnings.keyPattern;return 1===match.turns&&(warning=zxcvbnOptions.translations.warnings.straightRow),{warning:warning,suggestions:[zxcvbnOptions.translations.suggestions.longerKeyboardPattern]}};const defaultFeedback={warning:"",suggestions:[]};class Feedback{constructor(){this.matchers={bruteforce:bruteforceMatcher,date:dateMatcher,dictionary:dictionaryMatcher,regex:regexMatcher,repeat:repeatMatcher,sequence:sequenceMatcher,spatial:spatialMatcher},this.defaultFeedback={warning:"",suggestions:[]},this.setDefaultSuggestions()}setDefaultSuggestions(){this.defaultFeedback.suggestions.push(zxcvbnOptions.translations.suggestions.useWords,zxcvbnOptions.translations.suggestions.noNeed)}getFeedback(score,sequence){if(0===sequence.length)return this.defaultFeedback;if(score>2)return defaultFeedback;const extraFeedback=zxcvbnOptions.translations.suggestions.anotherWord,longestMatch=this.getLongestMatch(sequence);let feedback=this.getMatchFeedback(longestMatch,1===sequence.length);return null!=feedback?(feedback.suggestions.unshift(extraFeedback),null==feedback.warning&&(feedback.warning="")):feedback={warning:"",suggestions:[extraFeedback]},feedback}getLongestMatch(sequence){let longestMatch=sequence[0];return sequence.slice(1).forEach((match=>{match.token.length>longestMatch.token.length&&(longestMatch=match)})),longestMatch}getMatchFeedback(match,isSoleMatch){return this.matchers[match.pattern]?this.matchers[match.pattern](match,isSoleMatch):zxcvbnOptions.matchers[match.pattern]&&"feedback"in zxcvbnOptions.matchers[match.pattern]?zxcvbnOptions.matchers[match.pattern].feedback(match,isSoleMatch):defaultFeedback}}const time=()=>(new Date).getTime(),zxcvbn=(password,userInputs)=>{const start=time(),matches=(password=>(new Matching).match(password))(password);if(matches instanceof Promise)throw new Error("You are using a Promised matcher, please use `zxcvbnAsync` for it.");return((resolvedMatches,password,start)=>{const feedback=new Feedback,timeEstimates=new TimeEstimates,matchSequence=scoring.mostGuessableMatchSequence(password,resolvedMatches),calcTime=time()-start,attackTimes=timeEstimates.estimateAttackTimes(matchSequence.guesses);return __spreadProps(__spreadValues(__spreadValues({calcTime:calcTime},matchSequence),attackTimes),{feedback:feedback.getFeedback(attackTimes.score,matchSequence.sequence)})})(matches,password,start)},_sfc_main=defineComponent({name:"StrengthMeter",components:{InputPassword:Input.Password},props:{value:propTypes.string,showInput:propTypes.bool.def(!0),disabled:propTypes.bool},emits:["score-change","change"],setup(props,{emit:emit}){const innerValueRef=ref(""),{prefixCls:prefixCls}=useDesign("strength-meter"),getPasswordStrength=computed((()=>{const{disabled:disabled}=props;if(disabled)return-1;const score=unref(innerValueRef)?zxcvbn(unref(innerValueRef)).score:-1;return emit("score-change",score),score}));return watchEffect((()=>{innerValueRef.value=props.value||""})),watch((()=>unref(innerValueRef)),(val=>{emit("change",val)})),{getPasswordStrength:getPasswordStrength,handleChange:function(e){innerValueRef.value=e.target.value},prefixCls:prefixCls,innerValueRef:innerValueRef}}}),_hoisted_1=["data-score"];const StrengthMeter=withInstall(_export_sfc(_sfc_main,[["render",function(_ctx,_cache,$props,$setup,$data,$options){const _component_InputPassword=resolveComponent("InputPassword");return openBlock(),createElementBlock("div",{class:normalizeClass([_ctx.prefixCls,"relative"])},[_ctx.showInput?(openBlock(),createBlock(_component_InputPassword,mergeProps({key:0},_ctx.$attrs,{allowClear:"",value:_ctx.innerValueRef,onChange:_ctx.handleChange,disabled:_ctx.disabled}),createSlots({_:2},[renderList(Object.keys(_ctx.$slots),(item=>({name:item,fn:withCtx((data=>[renderSlot(_ctx.$slots,item,normalizeProps(guardReactiveProps(data||{})),void 0,!0)]))})))]),1040,["value","onChange","disabled"])):createCommentVNode("",!0),createBaseVNode("div",{class:normalizeClass(`${_ctx.prefixCls}-bar`)},[createBaseVNode("div",{class:normalizeClass(`${_ctx.prefixCls}-bar--fill`),"data-score":_ctx.getPasswordStrength},null,10,_hoisted_1)],2)],2)}],["__scopeId","data-v-765a9999"]]));export{StrengthMeter as S};
