import{dO as defineStore,a5 as defHttp,C as computed,B as useForm,w as watch}from"./index.js";import"./BasicForm.vue_vue_type_style_index_0_lang.js";import"./index19.js";import{l as lodash}from"./lodash.default.js";function useStep(props,{emit:emit}){let ins=null;const stepStore=useStepStore(),models=computed((()=>stepStore.models));let registerForm=null;if(props.schemas){const[registerFormOrigin]=useForm({schemas:props.schemas,labelWidth:120,labelAlign:"right",showActionButtonGroup:!1,baseColProps:{span:24},labelCol:{xs:24,sm:8},wrapperCol:{xs:24,sm:16}});registerForm=function(formAction,formModel){registerFormOrigin(formAction),watch(models,(v=>lodash.merge(formModel,v)),{deep:!0,immediate:!0}),watch(formModel,(v=>lodash.merge(models.value,v)),{deep:!0})}}function onCheck(key){let fn=props[`${key}Check`],flag=!0;"function"==typeof fn&&(flag=fn()),flag&&emitStep(key)}function emitStep(key){emit(key,{})}return[function(_ins){ins=_ins,ins.setProps(lodash.merge({prevBtn:{onClick:()=>onCheck("prev")},nextBtn:{onClick:()=>onCheck("next")}},props))},{emitStep:emitStep,models:models,stepStore:stepStore,registerForm:registerForm}]}const useStepStore=defineStore({id:"v2-steps",state:()=>({models:{mode:"full",installMode:"new",installPath:"",gitAddress:"gitee",userCookie:!0,groupBind:!0,userGacha:!0,miao_userData:!0,ach_userData:!0,cfg_basic:!0,commonCookie:!0,cfg_group:!0,cfg_groupDefault:!0,cfg_pushNews:!0,groupFace:!0,userNote:!0,redisClean:!1,rubbishClean:!0,moduleTool:"pnpm",transferJsMode:"passed",jsPluginInfo:{passed:null,noPass:null}},status:{state:0,logs:[],percent:0,reason:""},timer:null}),getters:{},actions:{updateStatus(){return __this=this,__arguments=null,generator=function*(){this.status=yield defHttp.get({url:"/v2-transfer/status"})},new Promise(((resolve,reject)=>{var fulfilled=value=>{try{step(generator.next(value))}catch(e){reject(e)}},rejected=value=>{try{step(generator.throw(value))}catch(e){reject(e)}},step=x=>x.done?resolve(x.value):Promise.resolve(x.value).then(fulfilled,rejected);step((generator=generator.apply(__this,__arguments)).next())}));var __this,__arguments,generator},startPolling(){this.timer||(this.timer=setInterval((()=>this.updateStatus()),1e3))},stopPolling(){this.timer&&(clearInterval(this.timer),this.timer=null)}}});export{useStep as a,useStepStore as u};
