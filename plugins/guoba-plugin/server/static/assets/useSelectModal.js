var __async=(__this,__arguments,generator)=>new Promise(((resolve,reject)=>{var fulfilled=value=>{try{step(generator.next(value))}catch(e){reject(e)}},rejected=value=>{try{step(generator.throw(value))}catch(e){reject(e)}},step=x=>x.done?resolve(x.value):Promise.resolve(x.value).then(fulfilled,rejected);step((generator=generator.apply(__this,__arguments)).next())}));import{p as propTypes,s as inject,r as ref,a as reactive,w as watch,y as unref,A as useMessage}from"./index.js";const selectModalProps={isRadioSelection:propTypes.bool.def(!1),rowKey:propTypes.string.def("id"),labelKey:propTypes.string.def("name"),params:propTypes.object.def((()=>({}))),showButton:propTypes.bool.def(!0),showSelected:propTypes.bool.def(!1),maxSelectCount:propTypes.number.def(0),modalTitle:propTypes.string.def("选择")};function useSelectModal(getList,props){const selectOptions=inject("selectOptions",ref([])),selectValues=inject("selectValues",reactive({value:[],change:!1})),loadingEcho=inject("loadingEcho",ref(!1)),dataSource=ref([]),checkedKeys=ref([]),selectRows=ref([]),$message=useMessage();let isFirstLoadEcho=!0;function onSelectChange(selectedRowKeys,selectRow){return __async(this,null,(function*(){if(checkedKeys.value=selectedRowKeys,props.showSelected&&unref(checkedKeys).length!==unref(selectRow).length){let{records:records}=yield getList({code:unref(checkedKeys).join(","),pageSize:unref(checkedKeys).length});selectRows.value=records}else selectRows.value=selectRow}))}watch(selectValues,(()=>{if(0==selectValues.change){let params={};params[props.rowKey]=selectValues.value.join(","),loadingEcho.value=isFirstLoadEcho,isFirstLoadEcho=!1,getDataSource(params,!0).then().finally((()=>{loadingEcho.value=isFirstLoadEcho}))}checkedKeys.value=selectValues.value}),{immediate:!0});const rowSelection={type:props.isRadioSelection?"radio":"checkbox",columnWidth:40,selectedRowKeys:checkedKeys,onChange:onSelectChange};function getDataSource(params,flag){return __async(this,null,(function*(){let{records:records}=yield getList(params);if(dataSource.value=records,flag){let options=[];records.forEach((item=>{options.push({label:item[props.labelKey],value:item[props.rowKey]})})),selectOptions.value=options}}))}return[{onSelectChange:onSelectChange,getDataSource:getDataSource,visibleChange:function(visible){return __async(this,null,(function*(){visible&&props.showSelected&&function(){__async(this,null,(function*(){let{records:records}=yield getList({code:selectValues.value.join(","),pageSize:selectValues.value.length});checkedKeys.value=selectValues.value,selectRows.value=records}))}()}))},selectOptions:selectOptions,selectValues:selectValues,rowSelection:rowSelection,indexColumnProps:{dataIndex:"index",title:"#",width:40},checkedKeys:checkedKeys,selectRows:selectRows,dataSource:dataSource,getSelectResult:function(success){let options=[],values=[];if(selectRows.value.forEach((item=>{options.push({label:item[props.labelKey],value:item[props.rowKey]})})),checkedKeys.value.forEach((item=>{values.push(item)})),selectOptions.value=options,props.maxSelectCount&&values.length>props.maxSelectCount)return $message.createMessage.warning(`最多只能选择${props.maxSelectCount}条数据`),!1;success&&success(options,values)},handleDeleteSelected:function(record){checkedKeys.value=checkedKeys.value.splice(checkedKeys.value.indexOf(record.id),1),selectRows.value=selectRows.value.filter((item=>item.id!==record.id))},reset:function(){checkedKeys.value=[],selectRows.value=[]}}]}export{selectModalProps as s,useSelectModal as u};
